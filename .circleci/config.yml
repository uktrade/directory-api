version: 2

jobs:
  test:
    working_directory: ~/directory-api
    docker:
      - image: cimg/python:3.9.13
      - image: cimg/postgres:12.8
        environment:
          POSTGRES_USER: debug
          POSTGRES_PASSWORD: debug
          POSTGRES_DB: directory_api_debug
      - image: cimg/redis:7.2
      - image: opensearchproject/opensearch:1.2.2
        ports: ["9200:9200"]
        environment:
          # Run in development mode to ignore bootstrap checks
          transport.host: "localhost"
          # opensearch configuration
          discovery.type: "single-node"
          plugins.security.disabled: "true"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          key: v1-deps-{{ checksum "requirements_test.txt" }}
      - run:
          name: Create virtualenv and install dependencies
          command: |
            pip install --upgrade pip
            make install_requirements
      - save_cache:
          key: v1-deps-{{ checksum "requirements_test.txt" }}
          paths:
            - "venv"
      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Install psql
          command: |
            sudo apt-get update
            sudo apt-get install postgresql-client
      - run:
          name: Run tests
          command: |
            mkdir test-reports
            make pytest_codecov -- --codecov-token=${CODECOV_TOKEN}
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  flake8:
    docker:
      - image: cimg/python:3.9.13
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run flake8
          command: |
            pip install flake8
            flake8
  black:
    docker:
      - image: cimg/python:3.9.13
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run Black in check mode
          command: |
            pip install black
            black ./ --check

workflows:
  version: 2
  test:
    jobs:
      - test
      - flake8
      - black
