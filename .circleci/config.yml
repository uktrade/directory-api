version: 2

jobs:
  test:
    docker:
      - image: circleci/python:3.6.6
      - image: circleci/postgres:9.5-alpine-ram
        environment:
          POSTGRES_USER: debug
          POSTGRES_PASSWORD: debug
          POSTGRES_DB: directory_api_debug
      - image: circleci/redis:3.2-alpine
      - image: docker.elastic.co/elasticsearch/elasticsearch:6.7.1
        ports: ["9200:9200"]
        environment:
          # Set memory
          ES_JAVA_OPTS: "-Xmx256m -Xms256m"
          # Disable security
          xpack.security.enabled: "false"
          xpack.monitoring.enabled: "false"
          xpack.graph.enabled: "false"
          xpack.watcher.enabled: "false"
          # Run in development mode to ignore bootstrap checks
          transport.host: "localhost"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          key: v1-deps-{{ checksum "requirements_test.txt" }}
      - run:
          name: Create virtualenv and install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install_requirements
      - save_cache:
          key: v1-deps-{{ checksum "requirements_test.txt" }}
          paths:
            - "venv"
      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Install psql
          command: |
            sudo apt-get update
            sudo apt-get install postgresql-client-9.6
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            mkdir test-reports
            make pytest -- --cov=. --cov-config=.coveragerc --cov-report=term --junitxml=test-reports/junit.xml
            codecov
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  flake8:
    docker:
      - image: circleci/python:3.6.6
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run flake8
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install flake8
            flake8

workflows:
  version: 2
  test:
    jobs:
      - test
      - flake8
